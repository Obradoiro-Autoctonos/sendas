google.maps.__gjsload__('elevation', function(_){var VRa=function(a,b){b=URa(b);if(!b.length)return _.Cp;var c=1/Math.max(a.clientWidth-16-67,1),d=16*c,e=67*c,f=1/Math.max(a.clientHeight-18-1.5,1);const g=18*f;var h=1.5*f;h=`${-d} ${-h} ${1+d+e} ${1+g+h}`;d=[new DOMPoint(-d,1+g),new DOMPoint(-d,b[0].y),...b,new DOMPoint(1+e,b[b.length-1].y),new DOMPoint(1+e,1+g)];e=l=>l.map(n=>`${n.x},${n.y}`).join(" ");d=XM`
        <polyline class="shading" points=${e(d)}></polyline>
      `;e=XM`
        <polyline class="path" points=${e(b)}></polyline>
    `;c*=3;f*=3;return(0,_.Bp)`
      <svg
        class="graph"
        viewBox=${h}
        preserveAspectRatio="none"
        role="img"
        .ariaLabel=${"Graph of elevation"}>
        ${d} ${e} ${XM`
        <ellipse class="end-marker" cx="0" cy=${b[0].y}
                 rx=${c} ry=${f}/>
      `} ${XM`
        <ellipse class="end-marker"
                 cx="1" cy=${b[b.length-1].y}
                 rx=${c} ry=${f}/>
      `}
      </svg>
      <div class="extent max">
        <div>${a.maxExtentLabel}</div>
        <div
          class="extent-glyph"
          .ariaLabel=${"Maximum elevation"}
          role="img"></div>
      </div>
      <div class="extent min">
        <div>${a.minExtentLabel}</div>
        <div
          class="extent-glyph"
          .ariaLabel=${"Minimum elevation"}
          role="img"></div>
      </div>
    `},URa=function(a){if(a.length<2)return[];const b=Math.min(...a),c=Math.max(...a)-b,d=[];for(let e=0;e<a.length;e++)d.push(new DOMPoint(e/a.length,c>0?1-(a[e]-b)/c:.5));return d},WRa=function(a){const [b,c]=["Elevation: ",""];return(0,_.Bp)`<span class="ellipsis">${b}</span>
    <span class="value">${a}</span>
    <span class="ellipsis">${c}</span>`},XRa=function(a,b){return(0,_.Bp)`
    <svg
      width="8"
      height="12"
      viewBox="0 0 8 12"
      class="arrow"
      role="img"
      .ariaLabel=${b}>
      <path
        transform=${a==="down"?"translate(0, 12) scale(1, -1)":_.Cp}
        d="M0.266667 4.48333L4 0.733333L7.73333 4.48333L6.38333 5.86667L4.98333 4.46667L4.98333 11.2667L3.01667 11.2667L3.01667 4.46667L1.61667 5.86667L0.266667 4.48333Z" />
    </svg>
  `},YRa=async function(a){const b=(a.path??[]).slice(),c=b.length===1;b.length?await _.$n(a,async d=>{const e={XH:!0,key:d(await a.Pg.fetch(d)).Pr()};a.DD=(c?d(await _.vda({locations:a.path},void 0,e)):d(await _.uda({path:a.path,samples:128},void 0,e))).results},c?230161:230160):await _.fga(a)},aSa=function(a,b){const c=Math.max(...b),d=Math.min(...b);var e;let f=e=0;for(let g=1;g<b.length;g++){const h=b[g]-b[g-1];h>0?e+=h:f+=-h}e=(0,_.Bp)`
      <div class="ascent-descent">
        <div>
          ${XRa("up","Total ascent")}
          ${ZRa(a,e)}
        </div>
        <div>\u00b7</div>
        <div>
          ${XRa("down","Total descent")}
          ${ZRa(a,f)}
        </div>
      </div>
    `;return(0,_.Bp)`
      <div class="header-bar">
        ${$Ra}
        <div class="title">${"Elevation"}</div>
        <div>
          <gmp-internal-google-attribution
            .variant=${0}>
          </gmp-internal-google-attribution>
        </div>
      </div>
      <div class="graph">
        ${e}
        <gmp-internal-elevation-graph
          .elevations=${b}
          .maxExtentLabel=${YM(a,c)}
          .minExtentLabel=${YM(a,d)}></gmp-internal-elevation-graph>
      </div>
    `},YM=function(a,b){const c=bSa(a);b=c===1?b*3.28084:b;return(new Intl.NumberFormat(a.Eg,{maximumFractionDigits:0,style:"unit",unit:c===1?"foot":"meter",unitDisplay:"short"})).format(b)},bSa=function(a){return a.unitSystem!=null?a.unitSystem:a.Jg&&_.Wp.has(a.Jg.toUpperCase())?1:0},ZRa=function(a,b){const c=bSa(a);b=Math.round(c===1?b*3.28084:b);return(new Intl.NumberFormat(a.Eg,{maximumSignificantDigits:3,style:"unit",unit:c===1?"foot":"meter",unitDisplay:"short"})).format(b)},cSa=function(a){return _.Mj({path:_.Vj(_.Lk,
_.Sj(b=>_.mj(b)>=2,"fewer than 2 LatLngs")),samples:_.Vj(_.Sk,_.Sj(b=>b>=2,"less than 2"))})(a)},dSa=function(a,b){_.Ii(a.Gg,2,b)},fSa=function(a,b,c,d,e){let f;a.hasOwnProperty("samples")&&(f=a.samples);let g;a.hasOwnProperty("path")&&(g=a.path);let h;a.hasOwnProperty("locations")&&(h=a.locations);a=new eSa;dSa(a,b(g||h));f!==void 0&&_.Pi(a.Gg,3,f);d(a,function(l){c(l);const n=l.hasOwnProperty("results")?l.results:null;e(n,l.status)},function(){e(null,"UNKNOWN_ERROR")})},gSa=function(a){switch(a){case "OK":return!0;
default:return!1}},hSa=function(a,b){let c;switch(a){case "DATA_NOT_AVAILABLE":c="Elevation data for the specified points were not available.";break;case "INVALID_REQUEST":c="The request was invalid.";break;case "OVER_QUERY_LIMIT":c="The webpage has gone over the requests limit in too short a period of time.";break;case "REQUEST_DENIED":c="The webpage is not allowed to use the elevation service.";break;default:return new _.Ro("The elevation request could not be successfully processed, yet the exact reason for the failure is not known.",
b,a)}return new _.So(c,b,a)},jSa=function(a,b,c,d){_.hx(_.go,_.gy+"/maps/api/js/ElevationService.GetElevationForLine",e=>(0,_.fo)(e,d?.key),_.hn(a,iSa),b,c,!0)},kSa=function(a,b,c){const d=()=>{_.ej("geometry").then(e=>{fSa(a,e.encoding.encodePath,f=>void _.tJ(f,_.uJ),(...f)=>jSa(...f,c),b)}).catch(()=>{})};c?.XH?d():_.QC(_.Ny,d)},XM=(a,...b)=>({_$litType$:2,gk:a,values:b}),lSa=_.Ip([":host(:not([hidden])){display:block}.clipper{height:100%;overflow:hidden;width:100%}.container{background-color:#fff;border:1px solid #e3e3e3;border-radius:8px;-moz-box-sizing:border-box;box-sizing:border-box;color:#1e1e1e;font-family:Google Sans Text,Roboto,Arial,sans-serif;font-size:14px}.container:has(>.path){height:100%;min-height:148px;min-width:258px}.container:has(>.single){min-width:200px}.path{-webkit-box-align:stretch;-moz-box-align:stretch;-ms-flex-align:stretch;-webkit-box-orient:vertical;-webkit-box-direction:normal;-moz-box-orient:vertical;-moz-box-direction:normal;-webkit-align-items:stretch;align-items:stretch;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;height:100%}.path,.path .header-bar{display:-webkit-box;display:-webkit-flex;display:-moz-box;display:-ms-flexbox;display:flex}.path .header-bar{-webkit-box-align:center;-moz-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;gap:12px;padding:16px 20px 12px}.path .title{-webkit-box-flex:1;-moz-box-flex:1;text-wrap:nowrap;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;font-size:16px;font-weight:500;overflow:hidden;text-overflow:ellipsis}.path .graph{-webkit-box-flex:1;-moz-box-flex:1;-webkit-box-orient:vertical;-webkit-box-direction:normal;-moz-box-orient:vertical;-moz-box-direction:normal;border-top:.5px solid #e3e3e3;-webkit-flex:1 1 0;-ms-flex:1 1 0px;flex:1 1 0;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;padding:16px 20px}.path .ascent-descent,.path .graph{display:-webkit-box;display:-webkit-flex;display:-moz-box;display:-ms-flexbox;display:flex}.path .ascent-descent{-webkit-box-flex:0;-moz-box-flex:0;-webkit-flex:none;-ms-flex:none;flex:none;gap:4px;margin-bottom:8px}.path gmp-internal-elevation-graph{-webkit-box-flex:1;-moz-box-flex:1;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}.mountain{-webkit-box-flex:0;-moz-box-flex:0;-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;height:24px;width:24px}.arrow,.mountain{fill:#5e5e5e}.arrow{margin-bottom:-.7px}.mountain:dir(rtl){-webkit-transform:scaleX(-1);transform:scaleX(-1)}.single{-webkit-box-align:start;-moz-box-align:start;-ms-flex-align:start;-webkit-align-items:flex-start;align-items:flex-start;gap:12px;padding:12px 20px 12px 16px}.single,.single .value-and-attribution{display:-webkit-box;display:-webkit-flex;display:-moz-box;display:-ms-flexbox;display:flex}.single .value-and-attribution{-webkit-box-align:stretch;-moz-box-align:stretch;-ms-flex-align:stretch;-webkit-align-items:stretch;align-items:stretch;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;line-height:20px;margin-top:2px;overflow:hidden;white-space:nowrap}.single .value-and-attribution .title-and-value{-webkit-margin-end:20px;-moz-margin-end:20px;display:-webkit-box;display:-webkit-flex;display:-moz-box;display:-ms-flexbox;display:flex;font-weight:500;margin-inline-end:20px;max-width:100%;white-space:pre}.single .value-and-attribution .title-and-value .ellipsis{overflow:hidden;text-overflow:ellipsis}.single .value-and-attribution .title-and-value .value{font-weight:400}.single .value-and-attribution .attribution{display:-webkit-box;display:-webkit-flex;display:-moz-box;display:-ms-flexbox;display:flex}.single .value-and-attribution .attribution .dot{-webkit-margin-start:-20px;-moz-margin-start:-20px;display:inline-block;margin-inline-start:-20px;text-align:center;width:20px}"]);var ZM=class extends _.Mp{constructor(){super();(new ResizeObserver(this.Eg.bind(this))).observe(this)}Xh(){return(0,_.Bp)`
      <div class="container">${VRa(this,this.elevations??[])}</div>
    `}Eg(){_.Xl(this)}};ZM.styles=(0,_.Ip)`
    :host(:not([hidden])) {
      display: block;
    }

    .container {
      width: 100%;
      height: 100%;
      position: relative;
    }

    svg {
      width: 100%;
      height: 100%;
      position: absolute;
    }

    svg:dir(rtl) {
      transform: scale(-1, 1);
    }

    .shading {
      stroke: none;
      fill: #ecf3fe;
    }

    .path {
      stroke: #0b57d0;
      fill: none;
      vector-effect: non-scaling-stroke;
      stroke-width: 3;
      stroke-linecap: round;
    }

    .end-marker {
      fill: #0b57d0;
    }

    .extent {
      display: flex;
      position: absolute;
      inset-inline-end: 0;
      gap: 5px;
    }

    .extent.max {
      align-items: flex-end;
      top: 0;
      transform: translateY(-100%);
    }

    .extent.min {
      align-items: flex-start;
      bottom: ${18}px;
      transform: translateY(100%);
    }

    .extent-glyph {
      display: inline-block;
      width: 10px;
      height: 2px;
      background: #444746;
    }
  `;_.Ga([_.An({uh:!1}),_.Ia("design:type",Array)],ZM.prototype,"elevations",void 0);_.Ga([_.An({uh:!1}),_.Ia("design:type",String)],ZM.prototype,"maxExtentLabel",void 0);_.Ga([_.An({uh:!1}),_.Ia("design:type",String)],ZM.prototype,"minExtentLabel",void 0);var $Ra=(0,_.Bp)`
  <svg viewBox="0 0 24 24" class="mountain" role="presentation">
    <path
      d="M14 6L9.78 11.63L11.03 13.3L14 9.33L19 16H10.54L6.53 10.63L1 18H23L14 6Z" />
  </svg>
`,$M=class extends _.qq{get path(){return this.Lg}set path(a){const b=_.Vj(_.Qj(_.sq),d=>{if(d.length<1)throw _.Kj("path must have at least 1 point");return d});let c;try{c=_.Wj(b)(a)}catch(d){throw _.bm(this,"path",a,d);}this.Lg=c?.length?c.map(d=>new _.ep(d)):null}get unitSystem(){return this.Sg??null}set unitSystem(a){try{this.Sg=_.Wj(_.Pj(_.Mn))(a)??void 0}catch(b){throw _.bm(this,"unitSystem",a,b);}}constructor(a={}){super(a);this.Lg=null;this.Pg=new _.rq(4);this.nj(a,$M,"ElevationElement");
this.path=a.path;this.unitSystem=a.unitSystem;a=_.Ji.Eg();this.Eg=a.Eg()||void 0;this.Jg=!a.Hg()&&a.Fg()||void 0;_.ej("util").then(b=>{b.ap()})}lj(a){a.has("path")&&YRa(this)}Hg(){const a=this.DD?.map(d=>d.elevation)??[];let b=(0,_.Bp)``;const c={single:!1,path:!1};if(a.length===0)return b;a.length===1?(b=(0,_.Bp)`
      ${$Ra}
      <div class="value-and-attribution">
        <div class="title-and-value">
          ${WRa(YM(this,a[0]))}
        </div>
        <div class="attribution">
          <div class="dot">\u00b7</div>
          <gmp-internal-google-attribution
            .variant=${2}>
          </gmp-internal-google-attribution>
        </div>
      </div>
    `,c.single=!0):(b=aSa(this,a),c.path=!0);return(0,_.Bp)` <div class=${(0,_.wq)(c)}>${b}</div> `}Fg(a){return(0,_.Bp)`
      <div class="clipper"><div class="container">${a}</div></div>
    `}};$M.prototype.constructor=$M.prototype.constructor;$M.styles=[lSa];$M.nl={xl:216403,wl:216402};_.Ga([_.An({uh:!1}),_.Ia("design:type",Object),_.Ia("design:paramtypes",[Object])],$M.prototype,"path",null);_.Ga([_.An({uh:"unit-system",ri:_.Pl(_.Mn)}),_.Ia("design:type",Object),_.Ia("design:paramtypes",[Object])],$M.prototype,"unitSystem",null);_.Ga([_.Cn(),_.Ia("design:type",Array)],$M.prototype,"DD",void 0);var mSa=!1;var eSa=class extends _.Y{constructor(){super()}},iSa=[_.R,_.mK,_.S,_.No,_.S];var aN={ElevationService:_.cp,ElevationStatus:_.Lha,getElevationAlongPath:function(a,b,c){c||(_.vJ(b),_.pl(window,"Eap"),_.N(window,152243));if(b)try{cSa(a)}catch(e){_.Lj(e)}const d=new Promise((e,f)=>{a=cSa(a);kSa(a,(g,h)=>{gSa(h)?(b&&b(g,h),e({results:g})):(b&&b(null,h),f(hSa(h,"ELEVATION_ALONG_PATH")))},c)});b&&d.catch(()=>{});return d},getElevationForLocations:function(a,b,c){c||(_.vJ(b),_.pl(window,"Efl"),_.N(window,152244));b&&_.Mj({locations:_.Lk})(a);const d=new Promise((e,f)=>{a=_.Mj({locations:_.Lk})(a);
kSa(a,(g,h)=>{gSa(h)?(b&&b(g,h),e({results:g})):(b&&b(null,h),f(hSa(h,"ELEVATION_LOCATIONS")))},c)});b&&d.catch(()=>{});return d},...(!1),connectForExplicitThirdPartyLoad:()=>{mSa||(mSa=!0)}};_.Fj(aN,["getElevationAlongPath","getElevationForLocations","connectForExplicitThirdPartyLoad"]);_.Ej(aN);_.fj("elevation",aN);});
