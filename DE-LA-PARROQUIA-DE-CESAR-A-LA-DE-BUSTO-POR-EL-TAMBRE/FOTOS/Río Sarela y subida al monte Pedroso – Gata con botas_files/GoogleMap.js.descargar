var cmmrmmap;

if (typeof Number.prototype.toRadians == 'undefined') {
	Number.prototype.toRadians = function() {
	   return this * Math.PI / 180;
	};
}

if (typeof Number.prototype.toDegrees == 'undefined') {
	Number.prototype.toDegrees = function() {
		   return this * 180 / Math.PI;
	};
}

jQuery("body").on("click", '.infowindow_closelink', function() { 
	jQuery(this).parents('.gm-style-iw-a').parent().remove();
});

jQuery("body").on("click", '.rinfowindow_closelink', function() { 
	jQuery(this).parents('.gm-style-iw-a').parent().remove();
}); 

jQuery("body").on("click", '.gm-style-mtc', function() { 
	jQuery('.swith-osm-router input[type="checkbox"]').prop('checked', false);
}); 

Element.prototype.setControlTextStyle = function() {
	jQuery(this).css({
		'color': 'rgb(25,25,25)',
		'font-family': 'Roboto,Arial,sans-serif',
		'font-size': '16px',
		'line-height': '38px',
		'margin-top': '35px'
	});
}

Element.prototype.setControlUIStyle = function() {
	jQuery(this).css({
		'border-radius': '3px',
		'cursor': 'pointer',
		'margin-bottom': '22px',
		'text-align': 'center',
	});
	jQuery(this).title = '';
}

function formatTileUrl (url, zoom, x, y) {
	var mapTileAPIKey = CMMRM_Map_Settings.mapTileAPIKey;
	if ( ~url.search(':zoom:') ) {
		url = url.replace(':zoom:', zoom).replace(/:x:|:col:/g, x).replace(/:y:|:row:/g, y);
	} else {
		url = url +"/" + zoom + "/" + x + "/" + y + ".png";
	}
	if(mapTileAPIKey != '') {
		url =  url+'?apikey='+mapTileAPIKey;
	}
	return url;
}

function CenterControl2(controlDiv, map) {
	
	if(jQuery('.cmmrm-route-map-canvas').length == 0) {
		
		var controlUI = document.createElement('div');
		controlUI.setControlUIStyle();
		controlDiv.appendChild(controlUI);

		if(CMMRM_Map_Settings.mapTileFeature == '1') {
			var controlText = document.createElement('div');
			controlText.setControlTextStyle();
			controlText.className = 'swith-osm-router';

			var default_checkbox_html = '';
			var default_checkbox_checked_html = '';
			var checkbox_html = '';
			
			if (CMMRM_Map_Settings.mapType == 'OSM') {
				default_checkbox_html += '<div class="map_tile_checkbox_row" data-index="0" data-url="'+CMMRM_Map_Settings.mapTileURL+'">';
				default_checkbox_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_0" />';
				default_checkbox_html += '<label for="map_tile_checkbox_0">'+CMMRM_Map_Settings.change_map_style+'</label>';
				default_checkbox_html += '</div>';
				default_checkbox_checked_html += '<div class="map_tile_checkbox_row" data-index="0" data-url="'+CMMRM_Map_Settings.mapTileURL+'">';
				default_checkbox_checked_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_0" checked />';
				default_checkbox_checked_html += '<label for="map_tile_checkbox_0">'+CMMRM_Map_Settings.change_map_style+'</label>';
				default_checkbox_checked_html += '</div>';
			}
			
			var checked_flag = false;
			var mapTileURLs = CMMRM_Map_Settings.mapTileURLs;
			jQuery.each(mapTileURLs, function(index, value) {
				index++;
				checkbox_html += '<div class="map_tile_checkbox_row" data-index="'+index+'" data-url="'+value.tile_url+'">';
				if(CMMRM_Map_Settings.mapType == 'OSM' && value.tile_default == '1') {
					checked_flag = true;
					checkbox_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_'+index+'" checked />';
				} else {
					checkbox_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_'+index+'" />';
				}
				checkbox_html += '<label for="map_tile_checkbox_'+index+'">'+value.tile_name+'</label>';
				checkbox_html += '</div>';
			});
			
			if(checked_flag == false) {
				controlText.innerHTML = default_checkbox_checked_html+checkbox_html;
			} else {
				controlText.innerHTML = default_checkbox_html+checkbox_html;
			}

			controlUI.appendChild(controlText);
		}

		jQuery("body").on("click", ".map_tile_checkbox_row", function() {

			if(jQuery(this).find('input').prop('checked')) {

				jQuery(".map_tile_checkbox").prop('checked', false);
				jQuery(this).find('input').prop('checked', true);
				
				var map_tile_url = jQuery(this).attr('data-url');
				map.setMapTypeId("OSM");
				map.mapTypes.set("OSM", new google.maps.ImageMapType({
					getTileUrl: function(coord, zoom) {
						var tilesPerGlobe = 1 << zoom;
						var x = coord.x % tilesPerGlobe;
						if (x < 0) {
							x = tilesPerGlobe + x;
						}
						return formatTileUrl(map_tile_url, zoom, x, coord.y);
					},
					tileSize: new google.maps.Size(256, 256),
					name: "OpenStreetMap",
					maxZoom: 21,
					minZoom: 0
				}));
			} else {
				map.setMapTypeId(CMMRM_Map_Settings.mapType == 'OSM' ? 'roadmap' : CMMRM_Map_Settings.mapType);
			}

		});

	} else {

		var osm_tiles = jQuery('.cmmrm-route-map-canvas').attr('osm_tiles');

		if (typeof osm_tiles != 'undefined' && osm_tiles != '') {

			var controlUI = document.createElement('div');
			controlUI.setControlUIStyle();
			controlDiv.appendChild(controlUI);

			//if (CMMRM_Map_Settings.mapTileFeature == '1') {
				
				var controlText = document.createElement('div');
				controlText.setControlTextStyle();
				controlText.className = 'swith-osm-router';
				
				var checkbox_html = '';

				var value_tile_name = '';
				var value_tile_url = '';

				var tile_name_counter = 0;

				var mapTileURLs = osm_tiles.split(',');
				jQuery.each(mapTileURLs, function(index, value) {
					index++;
					
					if(value.includes("|")) {
						var value_arr = value.split("|");
						value_tile_name = value_arr[0];
						value_tile_url = value_arr[1];
					} else {
						tile_name_counter++
						value_tile_name = CMMRM_Map_Settings.change_map_style+' '+tile_name_counter;
						value_tile_url = value;
					}

					checkbox_html += '<div class="map_tile_checkbox_row" data-index="'+index+'" data-url="'+value_tile_url+'">';
					if(index == 1) {
						checkbox_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_'+index+'" checked />';
					} else {
						checkbox_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_'+index+'" />';
					}
					checkbox_html += '<label for="map_tile_checkbox_'+index+'">'+value_tile_name+'</label>';
					checkbox_html += '</div>';
				});

				controlText.innerHTML = checkbox_html;
			//}
			
			controlUI.appendChild(controlText);

			jQuery("body").on("click", ".map_tile_checkbox_row", function() {

				if(jQuery(this).find('input').prop('checked')) {

					jQuery(".map_tile_checkbox").prop('checked', false);
					jQuery(this).find('input').prop('checked', true);
					
					var map_tile_url = jQuery(this).attr('data-url');
					map.setMapTypeId("OSM");
					map.mapTypes.set("OSM", new google.maps.ImageMapType({
						getTileUrl: function(coord, zoom) {
							var tilesPerGlobe = 1 << zoom;
							var x = coord.x % tilesPerGlobe;
							if (x < 0) {
								x = tilesPerGlobe + x;
							}
							return formatTileUrl(map_tile_url, zoom, x, coord.y);
						},
						tileSize: new google.maps.Size(256, 256),
						name: "OpenStreetMap",
						maxZoom: 21,
						minZoom: 0
					}));
				} else {
					map.setMapTypeId(CMMRM_Map_Settings.mapType == 'OSM' ? 'roadmap' : CMMRM_Map_Settings.mapType);
				}

			});

		} else {
				
			var controlUI = document.createElement('div');
			controlUI.setControlUIStyle();
			controlDiv.appendChild(controlUI);

			if(CMMRM_Map_Settings.mapTileFeature == '1') {
				var controlText = document.createElement('div');
				controlText.setControlTextStyle();
				controlText.className = 'swith-osm-router';

				var default_checkbox_html = '';
				var default_checkbox_checked_html = '';
				var checkbox_html = '';
				
				if (CMMRM_Map_Settings.mapType == 'OSM') {
					default_checkbox_html += '<div class="map_tile_checkbox_row" data-index="0" data-url="'+CMMRM_Map_Settings.mapTileURL+'">';
					default_checkbox_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_0" />';
					default_checkbox_html += '<label for="map_tile_checkbox_0">'+CMMRM_Map_Settings.change_map_style+'</label>';
					default_checkbox_html += '</div>';
					default_checkbox_checked_html += '<div class="map_tile_checkbox_row" data-index="0" data-url="'+CMMRM_Map_Settings.mapTileURL+'">';
					default_checkbox_checked_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_0" checked />';
					default_checkbox_checked_html += '<label for="map_tile_checkbox_0">'+CMMRM_Map_Settings.change_map_style+'</label>';
					default_checkbox_checked_html += '</div>';
				}
				
				var checked_flag = false;
				var mapTileURLs = CMMRM_Map_Settings.mapTileURLs;
				jQuery.each(mapTileURLs, function(index, value) {
					index++;
					checkbox_html += '<div class="map_tile_checkbox_row" data-index="'+index+'" data-url="'+value.tile_url+'">';
					if(CMMRM_Map_Settings.mapType == 'OSM' && value.tile_default == '1') {
						checked_flag = true;
						checkbox_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_'+index+'" checked />';
					} else {
						checkbox_html += '<input type="checkbox" class="map_tile_checkbox" id="map_tile_checkbox_'+index+'" />';
					}
					checkbox_html += '<label for="map_tile_checkbox_'+index+'">'+value.tile_name+'</label>';
					checkbox_html += '</div>';
				});
				
				if(checked_flag == false) {
					controlText.innerHTML = default_checkbox_checked_html+checkbox_html;
				} else {
					controlText.innerHTML = default_checkbox_html+checkbox_html;
				}

				controlUI.appendChild(controlText);
			}
			
			jQuery("body").on("click", ".map_tile_checkbox_row", function() {

				if(jQuery(this).find('input').prop('checked')) {

					jQuery(".map_tile_checkbox").prop('checked', false);
					jQuery(this).find('input').prop('checked', true);
					
					var map_tile_url = jQuery(this).attr('data-url');
					map.setMapTypeId("OSM");
					map.mapTypes.set("OSM", new google.maps.ImageMapType({
						getTileUrl: function(coord, zoom) {
							var tilesPerGlobe = 1 << zoom;
							var x = coord.x % tilesPerGlobe;
							if (x < 0) {
								x = tilesPerGlobe + x;
							}
							return formatTileUrl(map_tile_url, zoom, x, coord.y);
						},
						tileSize: new google.maps.Size(256, 256),
						name: "OpenStreetMap",
						maxZoom: 21,
						minZoom: 0
					}));
				} else {
					map.setMapTypeId(CMMRM_Map_Settings.mapType == 'OSM' ? 'roadmap' : CMMRM_Map_Settings.mapType);
				}

			});

		}
	}
}

function addYourLocationButton (mapObject) {

    var findmeDiv = document.createElement('div');

    var findmeButton = document.createElement('div');
	jQuery(findmeButton).css({
		'background-color': '#fff',
		'border': 'none',
		'outline': 'none',
		'width': '40px',
		'height': '40px',
		'border-radius': '2px',
		'box-shadow': '0 1px 4px rgba(0,0,0,0.3)',
		'cursor': 'pointer',
		'margin-right': '10px',
		'padding': '1px',
	});
    //findmeButton.title = 'Your Location';
    findmeDiv.appendChild(findmeButton);

    var findmeButtonIcon = document.createElement('div');
    findmeButtonIcon.style.margin = '11px';
    findmeButtonIcon.style.width = '18px';
    findmeButtonIcon.style.height = '18px';
    findmeButtonIcon.style.backgroundImage = 'url(https://maps.gstatic.com/tactile/mylocation/mylocation-sprite-2x.png)';
    findmeButtonIcon.style.backgroundSize = '180px 18px';
    findmeButtonIcon.style.backgroundPosition = '0 0';
    findmeButtonIcon.style.backgroundRepeat = 'no-repeat';
    findmeButton.appendChild(findmeButtonIcon);

    google.maps.event.addListener(mapObject, 'center_changed', function () {
        findmeButtonIcon.style['background-position'] = '0 0';
    });

    findmeButton.addEventListener('click', function () {
        var imgX = '0',
            animationInterval = setInterval(function () {
                imgX = imgX === '-18' ? '0' : '-18';
                findmeButtonIcon.style['background-position'] = imgX+'px 0';
            }, 500);

        if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                mapObject.setCenter(latlng);
                clearInterval(animationInterval);
                findmeButtonIcon.style['background-position'] = '-144px 0';
            });
        } else {
            clearInterval(animationInterval);
            findmeButtonIcon.style['background-position'] = '0 0';
        }
    });

    findmeDiv.index = 1;
    mapObject.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(findmeDiv);
}

function CMMRM_GoogleMap(containerId) {
	
	this.containerId = containerId;
	this.container = document.getElementById(containerId);
	var gestureHandling = (CMMRM_Map_Settings.scrollZoom == 'disable' ? 'cooperative' : 'greedy');
	var styles = [];
	var theme = jQuery('#'+containerId).data('map-style');
	if(typeof theme == 'object'){
		styles = theme;
	}
	if (CMMRM_Map_Settings.mapShowGooglePlaces != '1') {
		styles.push({
			featureType: "poi",
			stylers: [
				{ visibility: "off" }
			]
		});
	}
	this.map = new google.maps.Map(this.container, {
		clickableIcons: false, // Disable point-of-interest information window
		gestureHandling: gestureHandling,
		styles: styles
	});
	this.bounds = new google.maps.LatLngBounds();
	this.suspendAddWaypoints = false;
	this.centerZoomOffset = 0;
	
	this.map.setMapTypeId(CMMRM_Map_Settings.mapType);

	cmmrmmap = this.map;
	google.maps.event.addListenerOnce(this.map, 'idle', resetLabelmrm);

	var centerControlDiv = document.createElement('div');
	new CenterControl2(centerControlDiv, this.map);

	centerControlDiv.index = 1;
	this.map.controls[google.maps.ControlPosition.LEFT_TOP].push(centerControlDiv);

	if (CMMRM_Map_Settings.mapType == 'OSM') {
		var mapTileURL = CMMRM_Map_Settings.mapTileURL;
		var mapTileURLs = CMMRM_Map_Settings.mapTileURLs;
		jQuery.each(mapTileURLs, function(index, value) {
			if(value.tile_default == '1') {
				mapTileURL = value.tile_url;
			}
		});
		if(jQuery('.cmmrm-route-map-canvas').length > 0) {
			var osm_tiles = jQuery('.cmmrm-route-map-canvas').attr('osm_tiles');
			if(typeof osm_tiles != 'undefined' && osm_tiles != '') {
				var osm_tiles_arr = osm_tiles.split(',');
				if(osm_tiles_arr[0].includes("|")) {
					var value_arr = osm_tiles_arr[0].split("|");
					mapTileURL = value_arr[1];
				} else {
					mapTileURL = osm_tiles_arr[0];
				}
			}
		}
		this.map.setMapTypeId("OSM");
		this.map.mapTypes.set("OSM", new google.maps.ImageMapType({
			getTileUrl: function (coord, zoom) {
				var tilesPerGlobe = 1 << zoom;
				var x = coord.x % tilesPerGlobe;
				if (x < 0) {
					x = tilesPerGlobe + x;
				}
				return formatTileUrl(mapTileURL, zoom, x, coord.y);
			},
			tileSize: new google.maps.Size(256, 256),
			name: "OpenStreetMap",
			maxZoom: 21,
            minZoom: 0
		}));

	}
	//this.map.setZoom(13);
	//this.map.setCenter(new google.maps.LatLng(37.4419, -122.1419));
	
	var that = this;
	
	// workaround for a client
	if (document.body.innerHTML.indexOf('netdna-ssl.com') > -1) {
		setTimeout(function() {
			that.center();
			google.maps.event.trigger(that.map, "resize");
		}, 1000);
	}
	
	var mapObj = this;
	setTimeout(function() {
		mapObj.center();	
	}, 500);
}

function resetLabelmrm() {

	cmmrmmap.mapTypes.roadmap.name = CMMRM_Map_Settings.roadmapNameText;
	cmmrmmap.mapTypes.roadmap.alt = CMMRM_Map_Settings.roadmapAltText;

	cmmrmmap.mapTypes.satellite.name = CMMRM_Map_Settings.satelliteNameText;
	cmmrmmap.mapTypes.satellite.alt = CMMRM_Map_Settings.satelliteAltText;
	
	cmmrmmap.mapTypes.hybrid.name = CMMRM_Map_Settings.hybridNameText;
	cmmrmmap.mapTypes.hybrid.alt = CMMRM_Map_Settings.hybridAltText;

	cmmrmmap.mapTypes.terrain.name = CMMRM_Map_Settings.terrainNameText;
	cmmrmmap.mapTypes.terrain.alt = CMMRM_Map_Settings.terrainAltText;

	cmmrmmap.setOptions({'mapTypeControl':true});
}

CMMRM_GoogleMap.prototype.getContainerId = function() {
	return this.containerId;
};

CMMRM_GoogleMap.prototype.getContainer = function() {
	return this.container;
};

CMMRM_GoogleMap.prototype.setMapType = function(type) {
	this.map.setMapTypeId(type);
	return this;
};

CMMRM_GoogleMap.prototype.extendBounds = function(coords) {
	for (var i=0; i<coords.length; i++) {
		var pos = coords[i];
		if (Object.prototype.toString.call(pos) == '[object Array]') {
			pos = new google.maps.LatLng(pos[0], pos[1]);
		}
		this.bounds.extend(pos);
	}
	return this;
};

CMMRM_GoogleMap.prototype.center = function() {
	this.map.fitBounds(this.bounds);
	var zoomOffset = this.getCenterZoomOffset();
	if (zoomOffset != 0) {
		this.map.setZoom(this.map.getZoom() + zoomOffset);
	}
	return this;
};

CMMRM_GoogleMap.prototype.calculateDistance = function(p1, p2) {
	var R = 6371000; // metres
	var k = p1.lat().toRadians();
	var l = p2.lat().toRadians();
	var m = (p2.lat() - p1.lat()).toRadians();
	var n = (p2.lng() - p1.lng()).toRadians();
	var a = Math.sin(m/2) * Math.sin(m/2) +
    	Math.cos(k) * Math.cos(l) *
    	Math.sin(n/2) * Math.sin(n/2);
	var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
	return R * c;
};

CMMRM_GoogleMap.prototype.calculateSurfaceDistance = function(p1, alt1, p2, alt2) {
	var dist = this.calculateDistance(p1, p2);
	var altDiff = Math.abs(alt2 - alt1);
	return Math.sqrt(dist*dist + altDiff*altDiff);
};

CMMRM_GoogleMap.prototype.calculateDistanceArray = function(coords) {
	var dist = 0;
	var last = null;
	for (var i=0; i<coords.length; i++) {
		var current = coords[i];
		if (last) {
			dist += CMMRM_GoogleMap.prototype.calculateDistance(last, current);
		}
		last = current;
	}
	return dist;
};

CMMRM_GoogleMap.prototype.calculateMidpoint = function(p1, p2) {
	var lat1 = p1.lat().toRadians();
	var lon1 = p1.lng().toRadians();
	var lat2 = p2.lat().toRadians();
	var lon2 = p2.lng().toRadians();
	
	var bx = Math.cos(lat2) * Math.cos(lon2 - lon1);
	var by = Math.cos(lat2) * Math.sin(lon2 - lon1);
	var lat3 = Math.atan2(Math.sin(lat1) + Math.sin(lat2), Math.sqrt((Math.cos(lat1) + bx) * (Math.cos(lat1) + bx) + by*by));
	var lon3 = lon1 + Math.atan2(by, Math.cos(lat1) + Bx);
	
	return new google.maps.LatLng(lat3.toDegrees(), lon3.toDegrees());
};

CMMRM_GoogleMap.prototype.calculateMidpoints = function(p1, p2, maxDist) {
	var dist = this.calculateDistance(p1, p2);
	if (dist <= maxDist) return [];
	var num = dist / maxDist;
};

CMMRM_GoogleMap.prototype.findAddress = function(pos, successCallback) {
	var geocoder = new google.maps.Geocoder;
	geocoder.geocode({'location': pos}, function(results, status) {
		if (status === google.maps.GeocoderStatus.OK) {
			
			var findPostalCode = function(results) {
				for (var j=0; j<results.length; j++) {
					var address = results[j];
					var components = address.address_components;
					//console.log(components);
					for (var i=0; i<components.length; i++) {
						var component = components[i];
						if (component.types[0] == "postal_code"){
					        return component.short_name;
					    }
					}
				}
				return "";
			};
			
			if (results.length > 0) {
				var address = results[0];
				successCallback({
					results: results,
					postal_code: findPostalCode(results),
					formatted_address: address.formatted_address,
				});
			}
		}
	});
};

CMMRM_GoogleMap.prototype.setCenterZoomOffset = function(offset) {
	this.centerZoomOffset = offset;
	return this;
};

CMMRM_GoogleMap.prototype.getCenterZoomOffset = function() {
	return this.centerZoomOffset;
};